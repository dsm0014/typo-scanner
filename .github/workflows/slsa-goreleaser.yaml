name: SLSA Releaser
on:
  workflow_dispatch:
  push:
    tags:
      - "*"

permissions: read-all

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: typo-scanner

jobs:
  args:
    runs-on: ubuntu-latest
    outputs:
      ldflags: ${{ steps.ldflags.outputs.value }}
    steps:
      - id: checkout
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.3.4
        with:
          fetch-depth: 0
      - id: ldflags
        run: |
          echo "::set-output name=value::$(./scripts/version-ldflags)"


  build:
    permissions:
      id-token: write
      contents: write
      actions: read
    needs: args
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v1.2.0
    with:
      go-version: 1.19
      evaluated-envs: "VERSION_LDFLAGS:${{needs.args.outputs.ldflags}}"


  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.go-binary-name }}

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v1.6.0

      - name: Log into registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.SECRET_TOKEN }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v2.9.0
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:${{ github.run_id }}

  secure:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    needs: [build, docker]
    steps:
      - name: cosign-installer
        uses: sigstore/cosign-installer@v2.0.0

      - uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.go-binary-name }}

      - uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.go-binary-name }}.intoto.jsonl

      - name: Set RELEASE_VERSION env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Log into registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.SECRET_TOKEN }}

      - uses: anchore/sbom-action@v0
        id: image-sbom
        with:
          image: ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:${{ github.run_id }}
          artifact-name: ${{ needs.build.outputs.go-binary-name }}.sbom

      - name: Write signing key to disk
        run: 'echo "$KEY" > cosign.key'
        shell: bash
        env:
          KEY: ${{ secrets.COSIGN_KEY }}

      - name: Sign the published Docker image
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: cosign sign --key cosign.key ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:${{ github.run_id }}

      - uses: actions/setup-go@v3

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: slsa-framework/slsa-verifier
          ref: v1.1.1
          path: slsa-verifier

      - name: Get the slsa-verifier to extract provenance
        run: |
          cd slsa-verifier
          go run . -artifact-path ../${{ needs.build.outputs.go-binary-name }} -provenance ../${{ needs.build.outputs.go-binary-name }}.intoto.jsonl -source github.com/dsm0014/secure-cli -tag ${{ env.RELEASE_VERSION }} -branch master -print-provenance > ../provenance.json
          cd ../

      - name: Attest the SLSA provenance
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          cat provenance.json
          jq '.predicate' provenance.json > provenance.att
          cosign attest --predicate provenance.att --type slsaprovenance --key cosign.key ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:${{ github.run_id }}

      - uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.go-binary-name }}.sbom

      - name: Attest the SBOM
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: cosign attest --predicate ${{ needs.build.outputs.go-binary-name }}.sbom --type custom --key cosign.key ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}:${{ github.run_id }}


